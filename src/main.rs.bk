use std::env;
use regex::Regex;
use chrono::NaiveDateTime;

fn main() -> std::io::Result<()> {
    let args: Vec<String> = env::args().collect();

    let re = Regex::new(r#": (\d+):"#).unwrap();

    let history = std::fs::read(&args[1])?;
    let history = String::from_utf8_lossy(&history);
    for command in history.lines() {
        println!("command={}", command);
        let capture = re.captures_iter(command).next();
        if capture.is_none() {
            continue;
        }
        let timestamp = i64::from_str_radix(&capture.unwrap()[1], 10);
        if timestamp.is_err() {
        continue
        }
        println!("timestamp={}", timestamp.unwrap());
        let date_time = NaiveDateTime::from_timestamp(timestamp.unwrap(), 0);
        println!("date_time={}", date_time);
    }

    Ok(())
}
